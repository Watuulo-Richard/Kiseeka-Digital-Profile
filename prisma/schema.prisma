// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum UserRole {
  USER
  ADMIN
}
 
model User {
  id            String    @id @default(cuid())
  fullName      String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  portfolio     Portfolio?
  password      String
  accounts      Account[]
  sessions      Session[]
  isVerified     Boolean   @default(false)
  token         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}
 
model Portfolio {
  id            String      @id @default(cuid())
  title         String
  bio           String
  profileImage  String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @unique
  workExperience WorkExperience[]
  education     Education[]
  project       Project[]
  skill         Skill[]
  award         Award[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model WorkExperience {
  id          String   @id @default(cuid())
  position    String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
}

model Education {
  id          String   @id @default(uuid())
  institution      String
  educationLevel      String
  startDate   DateTime
  endDate     DateTime?
  description String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  level       String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
}

model Award {
  id          String   @id @default(cuid())
  title       String
  organization String?
  year        Int?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
}
 